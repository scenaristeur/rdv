{"version":3,"file":"js/about.36a9fdb5.js","mappings":"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","sources":["webpack://rdv/./src/views/AboutView.vue","webpack://rdv/./src/components/HelloWorld.vue","webpack://rdv/./src/components/HelloWorld.vue?bd04","webpack://rdv/./src/views/AboutView.vue?d56f"],"sourcesContent":["<template>\n  <div class=\"home\">\n\n    <HelloWorld/>\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\nimport HelloWorld from '@/components/HelloWorld.vue'\n\nexport default {\n  name: 'HomeView',\n  components: {\n    HelloWorld\n  }\n}\n</script>\n","<template>\n  <div>\n    <ol-map :loadTilesWhileAnimating=\"true\" :loadTilesWhileInteracting=\"true\" style=\"height: 80vh\" ref=\"map\">\n      <ol-view ref=\"view\" :center=\"center\" :rotation=\"rotation\" :zoom=\"zoom\" :projection=\"projection\" />\n\n      <ol-tile-layer>\n        <ol-source-osm />\n      </ol-tile-layer>\n\n\n      <ol-context-menu-control :items=\"contextMenuItems\" />\n\n      <ol-vector-layer>\n        <ol-source-vector ref=\"markers\"> </ol-source-vector>\n\n        <ol-style :overrideStyleFunction=\"overrideStyleFunction\">\n          <ol-style-fill :color=\"fillColor\"></ol-style-fill>\n          <ol-style-icon :src=\"marker\" :scale=\"0.05\"></ol-style-icon>\n          <ol-style-text text=\"Hellooooo\"></ol-style-text>\n        </ol-style>\n\n      </ol-vector-layer>\n\n      <ol-interaction-select @select=\"featureSelected\" :condition=\"selectCondition\" :features=\"selectedFeatures\">\n        <ol-style :overrideStyleFunction=\"overrideStyleFunction\">\n          <ol-style-fill :color=\"fillColor\"></ol-style-fill>\n          <ol-style-icon :src=\"marker\" :scale=\"0.1\"></ol-style-icon>\n          <ol-style-text color=\"white\" text=\"Hellooooo\"></ol-style-text>\n        </ol-style>\n      </ol-interaction-select>\n\n      <ol-vector-layer>\n        <ol-source-vector ref=\"users\"> </ol-source-vector>\n        <ol-style :overrideStyleFunction=\"overrideStyleFunction\">\n          <ol-style-circle :radius=\"radius\">\n            <ol-style-fill :color=\"fillColor\"></ol-style-fill>\n            <ol-style-stroke :color=\"strokeColor\" :width=\"strokeWidth\"></ol-style-stroke>\n            <ol-style-text text=\"Hellooooo\"></ol-style-text>\n          </ol-style-circle>\n        </ol-style>\n      </ol-vector-layer>\n\n\n\n\n      <ol-geolocation :projection=\"projection\" @change:position=\"geoLocChange\">\n        <template>\n          <ol-vector-layer :zIndex=\"2\">\n            <ol-source-vector>\n              <ol-feature ref=\"positionFeature\">\n                <ol-geom-point :coordinates=\"position\"></ol-geom-point>\n                <ol-style>\n                  <ol-style-icon :src=\"hereIcon\" :scale=\"0.1\"></ol-style-icon>\n                </ol-style>\n              </ol-feature>\n            </ol-source-vector>\n          </ol-vector-layer>\n        </template>\n      </ol-geolocation>\n    </ol-map>\n    <input type=\"checkbox\" id=\"checkbox\" ref=\"faking\" v-model=\"checked\" />\n    <label for=\"checkbox\">Fake</label>\n    &nbsp;&nbsp;\n    <input type=\"checkbox\" id=\"follow_me\" ref=\"follow_me\" checked v-model=\"follow_checked\" />\n    <label for=\"follow_me\">Follow me</label>\n<br>\n    <textarea name=\"my_interest\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\n    \n    <!-- <button @click=\"addMarker\">Add Marker</button> -->\n    <!-- <BButton @click=\"modal = !modal\"> Toggle modal </BButton> -->\n    <BModal v-model=\"modal\" @ok=\"onAddRdv\">\n\n\n      <BRow class=\"my-1\" v-for=\"field in inputFields\" :key=\"field.id\">\n        <BCol sm=\"3\">\n          <label :for=\"`type-${field.name}`\"><code>{{ field.name }}</code>:</label>\n        </BCol>\n        <BCol sm=\"9\">\n          <BFormInput :disabled=\"!edit\" :id=\"`type-${field.name}`\" :type=\"field.type\" v-model=\"rdv[field.id]\"\n            v-bind:min=\"field.min\" />\n        </BCol>\n      </BRow>\n      <!-- <div class=\"mt-2\">Value: {{ rdv }}</div> -->\n    </BModal>\n    <!-- \n   \n\n    <BFormInput v-model=\"rdv.title\" placeholder=\"Enter your name\" /> -->\n\n    <hr>\n    <small><i>right-click or long tap on the map to add a rdv</i></small>\n    0.0.1\n  </div>\n</template>\n\n<script setup>\nimport hereIcon from \"@/assets/here.png\";\nimport marker from \"@/assets/marker.png\";\nimport pin_drop from \"@/assets/pin_drop.png\";\nimport pin_center from \"@/assets/center.png\";\n//import marker_user from \"@/assets/marker_user.png\";\nimport * as Vue from \"vue\";\nimport { ref, inject } from \"vue\";\nimport { store as ystore, awareness } from \"@/y_store\";\nimport { enableVueBindings, observeDeep } from \"@syncedstore/core\";\nenableVueBindings(Vue);\nimport { v4 as uuidv4 } from 'uuid';\nimport { Collection } from \"ol\";\n// import { fromLonLat } from \"ol/proj\";\n// import Point from \"ol/geom/Point\";\n// import Icon from \"ol/style/Icon\";\n// import  Style from \"ol/style/Style\";\n// import VectorLayer from \"ol/layer/Vector\";\n// import VectorSource from \"ol/source/Vector\";\n//import  { View } from \"ol\";\n//import  { ObjectEvent } from \"ol/Object\";\n\nconst center = ref([2.2945009486790244, 48.858287635592696]);\nconst projection = ref(\"EPSG:4326\");\nconst zoom = ref(17);\nconst rotation = ref(0);\nconst view = ref();\nconst map = ref(null);\nconst position = ref([]);\n\nconst contextMenuItems = ref([]);\n\nconst markers = ref([]);\nconst users = ref([]);\nconst faking = ref(false);\nconst follow_me = ref(true);\nlet checked = false;\nlet follow_checked = true\n\n// let featuresArray = ref(null);\n\nconst radius = ref(5);\nconst strokeWidth = ref(1);\nconst strokeColor = ref(\"red\");\nconst fillColor = ref(\"white\");\n\n\nconst Feature = inject(\"ol-feature\");\nconst Geom = inject(\"ol-geom\");\nconst modal = ref(false)\nconst edit = ref(false)\n\nconst selectedFeatures = ref(new Collection());\n//const modifyEnabled = ref(false);\n\nconst selectConditions = inject(\"ol-selectconditions\");\nconst selectCondition = selectConditions.click;\n\nfunction featureSelected(event) {\n  console.log(event)\n  if (event.selected.length > 0) {\n    let selected_uuid = event.selected[0].get('uuid')\n    console.log(\"selected\", event.selected[0], event.selected[0].get('uuid'))\n    rdv.value = ystore.rdvs[selected_uuid]\n    console.log(rdv.value.author, 'if author = clientID, edit = true')\n    // edit.value = rdv.value.author == awareness.clientID\n    edit.value = false\n    modal.value = true\n  }\n  // console.log(selectedFeatures)\n\n\n\n\n  // modifyEnabled.value = false;\n  // if (event.selected.length > 0) {\n  //   modifyEnabled.value = true;\n  // }\n  // selectedFeatures.value = event.target.getFeatures();\n}\n\n\n// https://vue3openlayers.netlify.app/componentsguide/interactions/select/#usage\n// const selectConditions = inject(\"ol-selectconditions\");\n\n// const selectCondition = selectConditions.pointerMove;\n\n// const featureSelected = (event) => {\n//   console.log(event);\n// };\n\n// const selectInteactionFilter = (feature) => {\n//   console.log(feature/*,feature.get(\"title\")*/);\n//  // return feature.values_.name != undefined;\n// };\n\n\n\nconst inputFields = [\n  { id: 'title', name: 'Title', type: 'text' },\n  { id: 'desc', name: 'Description', type: 'text' },\n  { id: 'color', name: 'Color', type: 'color' },\n  { id: 'start_date', name: 'Start Date', type: 'date', min: new Date().toISOString().split('T')[0] },\n  { id: 'start_time', name: 'Start Time', type: 'time' },\n  { id: 'end_date', name: 'End Date', type: 'date', min: new Date().toISOString().split('T')[0] },\n  { id: 'end_time', name: 'End Time', type: 'time' },\n\n\n  // 'number',\n  // 'email',\n  // 'password',\n  // 'search',\n  // 'url',\n  // 'tel',\n  // 'date',\n  // 'time',\n  // 'range',\n  // 'color',\n  // 'datetime',\n  // 'datetime-local',\n  // 'month',\n  // 'week',\n]\n\nlet rdv = ref({})\n\ncontextMenuItems.value = [\n  {\n    text: \"Center map here\",\n    icon: pin_center, \n    classname: \"some-style-class\", // add some CSS rules\n    callback: (val) => {\n      view.value.setCenter(val.coordinate);\n      // view.value.zoom = 17\n      // zoom.value = 17\n      // map.value.changed()\n      // view.value.setZoom(17)\n    }, // `center` is your callback function\n  },\n  {\n    text: \"Add a rdv\",\n    classname: \"some-style-class\", // you can add this icon with a CSS class\n    // instead of `icon` property (see next line)\n    icon: pin_drop, // this can be relative or absolute\n    callback: (val) => {\n      // console.log(val);\n      rdv.value = {\n        uuid: uuidv4(),\n        author: awareness.clientID,\n        coordinates: val.coordinate,\n        start_date: new Date().toISOString().split('T')[0],\n        end_date: new Date().toISOString().split('T')[0],\n        start_time: \"00:00\",\n        end_time: \"23:59\"\n      }\n      // console.log(rdv)\n      edit.value = true\n      modal.value = true\n\n    },\n  },\n  \"-\", // this is a separator\n];\n\n\n\nconst onAddRdv = () => {\n\n  console.log(rdv.value)\n\n  rdv.value.updated = Date.now()\n\n\n  const feature = new Feature({\n    geometry: new Geom.Point(rdv.value.coordinates),\n    data: rdv.value\n  });\n  // console.log(\"feature1\", feature)\n  if (edit.value == true) {\n    markers.value.source.addFeature(feature);\n    ystore.rdvs[rdv.value.uuid] = rdv.value\n  }\n  // ystore.rdvs[rdv.value.uuid] != undefined ? delete ystore.rdvs[rdv.value.uuid] : \"\"\n\n\n}\n\n\n\n// var layerStyle = new Style({\n//   image: new Icon({\n//     src: marker, //?? // data url for max size image\n//   })\n// });\n\n// var layer = new VectorLayer({\n//   source: new VectorSource({\n//     features: featuresArray\n//   }),\n//   style: function (feature) {\n//     console.log(feature)\n//     // if (feature.get('year') >= sliderYear) {\n//     let scale = 0.1 //?? // calculate size for feature divided by max size\n//     layerStyle.getImage().setScale(scale);\n//     return layerStyle\n//     //  }\n//   }\n// })\n\n\n\nconst overrideStyleFunction = (feature, style) => {\n\n  let color = feature.get(\"color\");  //from extra data in properties of the feature\n  // if(properties == \"....\") // change the style\n  style.getImage().getFill != undefined && style.getImage().getFill().setColor(color);\n  let name = feature.get(\"name\");\n  // console.log(style.getImage())\n  style.getText().setText(name)\n\n}\n\n\n\n\n// You can think of your own awareness information as a key-value store.\n// We update our \"user\" field to propagate relevant user information.\nawareness.setLocalStateField('user', {\n  // Define a print name that should be displayed\n  name: 'user_' + Date.now(),\n  // Define a color that should be associated to the user:\n  color: '#ffb61e', // should be a hex color\n  clientID: awareness.clientID\n})\n\nconst geoLocChange = (event) => {\n  console.log(awareness.clientID, event);\n  let coordinates = event.target.getPosition()\n\n\n\n  if (faking.value.checked) {\n    coordinates[0] += Math.random() * (0.01 - (-0.01)) - 0.01\n    coordinates[1] += Math.random() * (0.01 - (-0.01)) - 0.01\n  }\n\n  position.value = coordinates\n  console.log(\"follow_me.value.checked\", follow_me.value.checked)\n  if (follow_me.value.checked) {\n    view.value?.setCenter(coordinates);\n  }\n\n\n\n  awareness.setLocalStateField('position', {\n    // Define a print name that should be displayed\n    coordinates: coordinates,\n    updated: Date.now()\n  })\n};\n\nconst updateUsers = (states) => {\n  // let featuresArray = []\n  states.forEach(s => {\n    //  console.log(s.user.name, s.user.color, s.position?.coordinates)\n    if (s.position != undefined && users.value != null && s.user.clientID != awareness.clientID && users.value.source != undefined) {\n      let exist = users.value.source.getFeatures().find(f => f.get('clientID') == s.user.clientID)\n      //  console.log(\"exist? \", s.user.clientID, exist)\n\n      if (exist == undefined) {\n\n        const feature = new Feature({\n          geometry: new Geom.Point(s.position.coordinates),\n          name: s.user.name,\n          color: s.user.color,\n          clientID: s.user.clientID\n        });\n        // console.log(\"feature\", feature, markers.value.source.getFeatures())\n        // console.log(\"find existing marker by values.clientID in  markers.value.source.getFeatures\",)\n\n        users.value.source.addFeature(feature);\n      } else {\n        exist.getGeometry().setCoordinates(s.position.coordinates)\n      }\n    }\n  });\n  //   }\n  // featuresArray.push(feature)\n  // });\n\n  // if (featuresArray.length > 0){\n  //   console.log(featuresArray)\n  //  // markers.value.source.clear();\n  // //markers.value.source.addFeatures(featuresArray);\n  // }\n\n\n  //  layer.changed()\n}\n\n// You can observe when a user updates their awareness information\nawareness.on('change', () /*changes */ => {\n  // console.log(\"changes\", changes)\n  // Whenever somebody updates their awareness information,\n  // we log all awareness information from all users.\n  // console.log(Array.from(awareness.getStates().values()))\n  updateUsers(Array.from(awareness.getStates().values()))\n})\n\n\n\n\nconst rdvsUpdate = (e) => {\n  console.log(e)\n  if (markers.value != null) {\n    // markers.value.getSource().clear()\n    // e.forEach(position => { console.log(\"POS\", position) })\n    for (let [uuid, rdv] of Object.entries(ystore.rdvs)) {\n      if (uuid != awareness.clientID) {\n        console.log(\"coordin\", uuid, rdv.coordinates[0], rdv.coordinates[1], rdv.title)\n        console.log(\"dates\", uuid, rdv.end_date, rdv.end_time/*rdv.toJSON(),*/ /*rdv.ownKeys()*/)\n        let iso8601 = rdv.end_date + \"T\" + rdv.end_time + \":00Z\"\n        let date = new Date(iso8601)\n        let now = Date.now()\n        console.log(now, date)\n        let diff = date.getTime() - now\n        if (diff < 0) {\n          delete ystore.rdvs[uuid]\n          return\n        }\n        //date to timestamp  https://stackoverflow.com/questions/9873197/how-to-convert-date-to-timestamp \n        if (rdv.end_date != undefined && rdv.end_time != undefined) {\n\n          // let d = rdv.end_date.split(\"-\").join(\"/\") + \" \" + rdv.end_time != undefined ? rdv.end_time : \"23:59\"\n          // console.log(d)\n          // let strDate = new Date(d)\n          // console.log(strDate, strDate.getTime())\n          // var datum = Date.parse(strDate);\n          // console.log(datum)\n\n\n\n          const feature = new Feature({\n            geometry: new Geom.Point(rdv.coordinates),\n            name: rdv.title, //+ rdv.start_date + rdv.end_date,\n            uuid: uuid\n          });\n          markers.value.source.addFeature(feature);\n\n        } else {\n          console.log(uuid, \"no end_date\")\n          delete ystore.rdvs[uuid]\n        }\n      }\n    }\n  }\n\n\n\n\n  // .forEach( => {\n  //   const feature = new Feature({\n  //         geometry: new Geom.Point(val.coordinate),\n  //       });\n  //       markers.value.source.addFeature(feature);\n\n  // });\n\n\n}\n\nobserveDeep(ystore.rdvs, rdvsUpdate)\nrdvsUpdate()\n\n</script>\n\n<style scoped>\nbutton {\n  border: 1px solid black;\n  margin: 0.5rem 0;\n  padding: 0.5rem;\n}\n\nbutton:hover,\nbutton:focus {\n  background-color: lightgray;\n}\n</style>","import script from \"./HelloWorld.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./HelloWorld.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./HelloWorld.vue?vue&type=style&index=0&id=5277e260&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5277e260\"]])\n\nexport default __exports__","import { render } from \"./AboutView.vue?vue&type=template&id=96bca194\"\nimport script from \"./AboutView.vue?vue&type=script&lang=js\"\nexport * from \"./AboutView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_HelloWorld","enableVueBindings","Vue","center","ref","projection","zoom","rotation","view","map","position","contextMenuItems","markers","users","faking","follow_me","checked","follow_checked","radius","strokeWidth","strokeColor","fillColor","Feature","inject","Geom","modal","edit","selectedFeatures","Collection","selectConditions","selectCondition","click","featureSelected","event","console","log","selected","length","selected_uuid","get","rdv","value","ystore","rdvs","author","inputFields","id","name","type","min","Date","toISOString","split","text","icon","pin_center","classname","callback","val","setCenter","coordinate","pin_drop","uuid","uuidv4","awareness","clientID","coordinates","start_date","end_date","start_time","end_time","onAddRdv","updated","now","feature","geometry","Point","data","source","addFeature","overrideStyleFunction","style","color","undefined","getImage","getFill","setColor","getText","setText","setLocalStateField","geoLocChange","target","getPosition","Math","random","updateUsers","states","forEach","s","user","exist","getFeatures","find","f","getGeometry","setCoordinates","on","Array","from","getStates","values","rdvsUpdate","e","Object","entries","title","iso8601","date","diff","getTime","observeDeep","__exports__","components","HelloWorld","render"],"sourceRoot":""}